name: Publish to GitHub Packages

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 5.0.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: "3.11"

jobs:
  build-rust:
    name: Build Rust Extensions
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Install maturin
      run: pip install maturin
      
    - name: Build Rust extensions
      run: |
        cd mcli_rust
        maturin build --release --interpreter python
        
    - name: Upload Rust wheels
      uses: actions/upload-artifact@v3
      with:
        name: rust-wheels-${{ matrix.os }}-py${{ matrix.python-version }}
        path: mcli_rust/target/wheels/*.whl

  build-python:
    name: Build Python Package
    runs-on: ubuntu-latest
    needs: build-rust
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
        
    - name: Download Rust wheels
      uses: actions/download-artifact@v3
      with:
        pattern: rust-wheels-*
        merge-multiple: true
        path: dist/
        
    - name: Build package
      run: |
        python -m build
        
    - name: Upload Python package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/*

  test:
    name: Test Package Installation
    runs-on: ubuntu-latest
    needs: [build-python]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
        
    - name: Install package
      run: |
        pip install dist/*.whl
        
    - name: Test basic functionality
      run: |
        mcli version
        mcli --help
        mcli self performance
        mcli visual message --style success "Package installation successful!"

  publish:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: [test]
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
        
    - name: Install publishing dependencies
      run: |
        python -m pip install --upgrade pip
        pip install twine
        
    - name: Configure package index
      run: |
        echo "index-url = https://pypi.org/simple/" > ~/.pypirc
        echo "[distutils]" > ~/.pypirc
        echo "index-servers = github" >> ~/.pypirc
        echo "" >> ~/.pypirc
        echo "[github]" >> ~/.pypirc
        echo "repository = https://upload.pypi.org/legacy/" >> ~/.pypirc
        echo "username = __token__" >> ~/.pypirc
        echo "password = ${{ secrets.PYPI_API_TOKEN }}" >> ~/.pypirc
        
    - name: Publish to PyPI (GitHub Packages)
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload dist/* --verbose
        
    - name: Create GitHub Release Assets
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-github-packages:
    name: Publish to GitHub Container Registry
    runs-on: ubuntu-latest
    needs: [test]
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install publishing dependencies
      run: |
        python -m pip install --upgrade pip
        pip install twine
        
    - name: Publish to GitHub Packages
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        TWINE_REPOSITORY_URL: https://upload.pypi.org/legacy/
      run: |
        # For now, we'll use PyPI. GitHub Packages for Python requires different setup
        echo "Publishing to PyPI (accessible via GitHub)"
        python -m twine upload dist/* --verbose || echo "Package already exists or upload failed"