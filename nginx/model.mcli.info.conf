# Nginx configuration for MCLI Model Service
# This configuration sets up a reverse proxy for the MCLI model service
# with SSL/TLS support for secure public access
#
# NOTE: This config is for a router-level nginx (not on the same host as MCLI)
# Replace 192.168.8.100 with your actual host server's internal IP address

# Redirect HTTP to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name model.mcli.info;

    # Let's Encrypt ACME challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name model.mcli.info;

    # SSL Certificate Configuration
    # Update these paths to match your existing SSL certificate setup
    # Common locations:
    # - /etc/nginx/ssl/model.mcli.info.crt and .key
    # - /etc/nginx/certificates/model.mcli.info.crt and .key
    # - /etc/letsencrypt/live/model.mcli.info/fullchain.pem and privkey.pem
    ssl_certificate /etc/nginx/ssl/model.mcli.info.crt;
    ssl_certificate_key /etc/nginx/ssl/model.mcli.info.key;

    # SSL Configuration (Modern, secure settings)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305;
    ssl_prefer_server_ciphers off;

    # SSL Session Configuration
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # HSTS (HTTP Strict Transport Security)
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

    # Security Headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Logging
    access_log /var/log/nginx/model.mcli.info.access.log;
    error_log /var/log/nginx/model.mcli.info.error.log;

    # Proxy settings
    location / {
        # Proxy to MCLI model service on internal network
        # IMPORTANT: Replace with your actual host server IP
        proxy_pass http://192.168.8.100:51234;

        # Proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket support (if needed)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 300s;

        # Buffering
        proxy_buffering off;
        proxy_request_buffering off;
    }

    # Health check endpoint (no auth required)
    location /health {
        proxy_pass http://192.168.8.100:51234/health;
        proxy_set_header Host $host;
        access_log off;
    }

    # Rate limiting for API endpoints
    location /v1/chat/completions {
        # Apply rate limit
        limit_req zone=api_limit burst=5 nodelay;

        proxy_pass http://192.168.8.100:51234/v1/chat/completions;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Longer timeout for completions
        proxy_read_timeout 600s;

        # Don't buffer responses (for streaming)
        proxy_buffering off;
        proxy_request_buffering off;
    }
}

# Rate limiting configuration
# Place this in the http block of /etc/nginx/nginx.conf or in a separate conf file
# limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/m;
